from config import client
from flask_restful import Resource
import secrets
from datetime import datetime as dt

class UKeys(Resource):
    '''
        Whenever the API is called, it returns all the previous UUIDs ever generated by the API alongside a new UUID.
    '''
    def get(self):

        # Generate new uuid
        new_uuid = secrets.token_hex(16)

        # Generate timestamp
        date = dt.now()
        timestamp = date.strftime("%Y-%m-%d %H:%M:%S:%f")

        try:
            #add new generated uuid to DB
            add_new_uuid = client.db.cowrywise_task_uuids.insert_one({'uuid': new_uuid, 'timestamp': timestamp})

        except Exception as e:
            return {"message": "Didn't add generated uuid to Database!", "status": "Failed", "error": f"{e}"}
        
        try:
            # Fetch all generated uuids
            fetch_all_uuids = client.db.cowrywise_task_uuids.find({}, {'_id': 0}).sort('timestamp', -1)

            all_uuids = {}

            # Assigning timestamp as Keys and generated uuids as values
            for uuid in fetch_all_uuids:
                all_uuids[uuid['timestamp']] = uuid['uuid']

        except Exception as e:
            return {"message": "Couldn't fetch uuids from Database!", "status": "Failed", "error": f"{e}"}
        
        else:
            return all_uuids

